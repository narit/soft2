ソフト2 1/17

課題の解説みたいなものです。
毎週，発展課題が終わりなき戦いな気がしますが，
今回は発展課題までは簡単なので頑張りましょう。
(プログラミング経験のある人は匿名でもいいので，
driveeにソースを上げていただけると嬉しいです。
ペイントソフトで色つけてたものとか面白そうだったのでソースみたいです！)

課題1
	makeの練習がしたい！ってのが目的
	先生も「30秒で終わる課題」って言っておられました。
	終了条件ってのは
	「gradの大きさがある値以下になったらもういいかな」っていう値のことなので，
	それを踏まえると1行(というか数文字)変えるだけでOKです。
	繰り返しをどこまでやるかってことですね。
	あとは，条件を厳しくすると繰り返し回数も上げる必要があったりするかもしれません。
	まぁ難しく考えずにやってください。

-----

課題2
	今回は関数のポインタを引数として渡します。
	
	まずは関数ポインタの簡単な説明を。
	
	int hoge(int *a, double b)
	{
		return 0;
	}
	というように関数があったときはhogeという名前が関数のアドレスを返すようになります。
	(配列名が配列の先頭要素のアドレスを返すのと同じような意味)

	これを受け取る方法は(ソフト1を思い出して)，
	int (*p)(int *, double)
	という変数宣言をすると，
	pは
	「引数にint*型とdouble型の引数を取り，int型を返す関数へのポインタ」
	となるので，さっきの関数のアドレスを
	p = hoge;
	と代入することができます。
	
	そうすると，p(array, num);というふうに書けば，
	hoge(array, num)と書くのと全く同じになります。
	こうすると同じような関数を，関数ポインタの配列を作って添字で管理するとか
	ソートをするときに，要素の比較をする関数をいろいろ作って，関数ポインタとしてソートをする関数に渡すことで，
	ソート関数の汎用性が上がったりします。
	(driveeのDanushka_Kadaiってフォルダに検索エンジンの中間レポートのソースを
	入れてありますがそこでも多用してます)
	
	今回はこの方法をつかって，他のファイルにある関数へアクセスします。
	つまり, optimizeの引数でこの関数ポインタを受け取れるようにすればいいわけです。
	
	渡すときは，配列名を関数に渡すような感じで関数名を
	optimize(......, f_value);
	として渡します。
	受け取る方法は，optimize関数の実体がある部分で上記のpのような指定を引数の部分に書けばOKです。
	
-----

課題3
	テキトーに関数を考えてf_valueなどを変更してください。
	極小値についても関数によるので，求まった極小値が何を表すかを説明しやすい関数にすればいいんじゃないかなぁ。
	
-----

課題4
	これは工夫できる人が自由にやってください！