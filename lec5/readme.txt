【課題3について】
入力が3次元の関数として
f(x, y, z) = cos(x) + sin(y) + cos(z)
を選ぶ。

これに対し，初期点(0, 0, 0)，変化の割合αを0.01，終了条件を|∇f| < 0.0001とすると，
最急降下法によって，
987回目に
x =  0.0000, y = -1.5707, z =  0.0000, f =  1.0000
が得られる。

これが求まった極小値である。
一つの極小値しか求まっていないが，fは周期性から，明らかに複数の極小値が存在する。
この極小値は，初期点と変化の割合の与え方によって変化する。

例えば，初期点は変えず，変化の割合を2とすると終了条件を満たす値の前後を行き来して収束しなくなる。
しかし，変化の割合を1とすると
4回目で
x =  0.0000, y = -1.5708, z =  0.0000, f =  1.0000
とすぐに収束する。
つまり，適切な刻み幅にすることで計算回数を少なくできるが，
大きくし過ぎると収束しなくなるという問題があることがわかる。

また逆に，変化の割合を変えず，初期点を(1, 1, 1)とすると，変化の割合が0.01のときは
1133回目に
x =  3.1416, y = -1.5707, z =  3.1416, f = -3.0000
に収束する。
三角関数の性質からこれが最小値であることは明らかである。
基本的には，変化の割合が十分小さければ初期点に近い極小値へと収束するが，
変化の割合が大きければ飛び越して別の極小値を指したり，極大値を指したりする。

また，もちろん極小値がない問題も収束しない[ex)x + (y - 1)^3 + z - 1]。

-----

【課題4について】
func.c
func.h
main.c
optimize.h
optimize3.c
が課題4用のファイルです。
Makefileをつけておきました。

課題4では，準ニュートン法に黄金分割法を組み合わせています。
これは，ニュートン法で行うヘッシアンの計算をBFGS公式
	H[k+1] = A H[k] A + B
	ただし，A = (I - y[(s)^T] / [(y)^T]s), B = y[(y)^T] / [(y)^T]s,
		y[k] = x[k+1] - x[k], s[k] = ∇f(x[k+1]) - ∇f(x[k])
[http://www.sist.ac.jp/~suganuma/kougi/other_lecture/SE/opt/nonlinear/nonlinear.htm#2.7]
によって，近似的に求める方法で，これによってニュートン法のようにヘッシアンを求める手間が省けます。

さらに探索方向への変化率αは直線探索で求めますが，これには黄金分割法を用いました。
[http://www.sc.kansai-u.ac.jp/STL/view_file0.php?id=258&file=2008/10/6/09/258/jyugyou/upQxwD4j.pdf]
これは黄金率によって，求めたい範囲の2点間の間に，新たに2点をとり，その点の関数の値から範囲を更新していくものです。

この2つによって，例えば
f(x, y, z) = cos(x) + sin(y) + cos(z)
についての最適化問題を解くと，初期点(0, 0, 0)，終了条件を|∇f| < 0.0001として
13回で
x =  3.1416, xy = -1.5708, z =  3.1416, f = -3.0000
にたどり着きました。

これは最急降下法で初期点(0, 0, 0)，変化の割合αを0.01，終了条件を|∇f| < 0.0001としたときに，
987回目に
x =  0.0000, y = -1.5707, z =  0.0000, f =  1.0000
が得られたのに比べて非常に早いです。

あとは，追加で初期値をコマンドラインから指定できるようにしておきました。
Usage: ./a.out x0 x1 ...
(Default: 0.0)
